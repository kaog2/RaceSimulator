<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SwissTiming.Timing.AcquisitionSimulator</name>
    </assembly>
    <members>
        <member name="T:SwissTiming.Timing.AcquisitionSimulator.Competitor">
            <summary>
            A competitor is someone, something or a combination of both that take part
            within a race. It's defined by a name and BIB.
            </summary>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.Competitor.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SwissTiming.Timing.AcquisitionSimulator.Competitor"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="bib">The bib.</param>
        </member>
        <member name="P:SwissTiming.Timing.AcquisitionSimulator.Competitor.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:SwissTiming.Timing.AcquisitionSimulator.Competitor.Bib">
            <summary>
            Gets the bib.
            </summary>
        </member>
        <member name="T:SwissTiming.Timing.AcquisitionSimulator.StartKind">
            <summary>
            Defines the possible mode of starting competitors for the Simulator
            </summary>
        </member>
        <member name="F:SwissTiming.Timing.AcquisitionSimulator.StartKind.MassStart">
            <summary>
            Defines that all competitors are started at the same time.
            </summary>
        </member>
        <member name="F:SwissTiming.Timing.AcquisitionSimulator.StartKind.Individual">
            <summary>
            Defines that only one competitor will be launch at one time.
            </summary>
        </member>
        <member name="T:SwissTiming.Timing.AcquisitionSimulator.Status">
            <summary>
            Defines the different types of state a competitor can be
            </summary>
        </member>
        <member name="F:SwissTiming.Timing.AcquisitionSimulator.Status.Waiting">
            <summary>
            Waiting to start
            </summary>
        </member>
        <member name="F:SwissTiming.Timing.AcquisitionSimulator.Status.Running">
            <summary>
            This competitor is currently in race.
            </summary>
        </member>
        <member name="F:SwissTiming.Timing.AcquisitionSimulator.Status.Completed">
            <summary>
            This competitor has stopped its race either by finishing it or he has been given an IRM.
            </summary>
        </member>
        <member name="T:SwissTiming.Timing.AcquisitionSimulator.IrmKind">
            <summary>
            Defines the IRM types that might be generated by the Simulator. An IRM is a status
            that might be given to a specific competitor to indicate it's new status within a competition.
            </summary>
        </member>
        <member name="F:SwissTiming.Timing.AcquisitionSimulator.IrmKind.DNS">
            <summary>
            Defines the competitor as  Did Not Start. This competitor wasn't present in time at the start.
            </summary>
        </member>
        <member name="F:SwissTiming.Timing.AcquisitionSimulator.IrmKind.DNF">
            <summary>
            Defines the competitor as Did Not Finish. This competitor didn't finish the race.
            </summary>
        </member>
        <member name="F:SwissTiming.Timing.AcquisitionSimulator.IrmKind.DSQ">
            <summary>
            Defines the competitor as Disqualified. This is issued after a jury decision to ban a rule infraction.
            </summary>
        </member>
        <member name="F:SwissTiming.Timing.AcquisitionSimulator.IrmKind.None">
            <summary>
            Means no IRM where given to this competitor
            </summary>
        </member>
        <member name="T:SwissTiming.Timing.AcquisitionSimulator.RaceEventKind">
            <summary>
            Enumerates the event kinds that might occurred at each tick from the timer. An event can be either applied to multiples
            or one single competitors.
            </summary>
        </member>
        <member name="F:SwissTiming.Timing.AcquisitionSimulator.RaceEventKind.Start">
            <summary>
            Triggers a start event (start contact(s) where closed)
            </summary>
        </member>
        <member name="F:SwissTiming.Timing.AcquisitionSimulator.RaceEventKind.Finish">
            <summary>
            Triggers a finish event (finish contact(s) where closed)
            </summary>
        </member>
        <member name="F:SwissTiming.Timing.AcquisitionSimulator.RaceEventKind.Irm">
            <summary>
            Triggers an IRM event (the jury or the competitor have done something)
            </summary>
        </member>
        <member name="T:SwissTiming.Timing.AcquisitionSimulator.Litterals">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SwissTiming.Timing.AcquisitionSimulator.Litterals.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SwissTiming.Timing.AcquisitionSimulator.Litterals.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SwissTiming.Timing.AcquisitionSimulator.Litterals.FalseStartReason">
            <summary>
              Looks up a localized string similar to Competitor did a false start.
            </summary>
        </member>
        <member name="T:SwissTiming.Timing.AcquisitionSimulator.RaceEventGenerator">
            <summary>
            This class supplies race events for one race. It has to be queried for an event.
            The same instance must be kept for the whole simulation as some history are maintained to
            avoid to many recurrences of some IRM.
            </summary>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.RaceEventGenerator.#ctor(SwissTiming.Timing.AcquisitionSimulator.Simulator)">
            <summary>
            Initializes a new instance of the <see cref="T:SwissTiming.Timing.AcquisitionSimulator.RaceEventGenerator"/> class.
            </summary>
            <param name="s">The simulator associated with this event generator</param>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.RaceEventGenerator.GetRaceEvent(System.DateTime)">
            <summary>
            Gets the race event.
            </summary>
            <param name="eventTime">The event time.</param>
            <returns>RaceEventKind.</returns>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.RaceEventGenerator.GetIrm">
            <summary>
            Gets the irm.
            30% of chance to have an irm of type DNS
            50% of chance to have an irm of type DNF
            10% of chance to have an irm of type DSQ
            </summary>
            <returns></returns>
        </member>
        <member name="T:SwissTiming.Timing.AcquisitionSimulator.Simulator">
            <summary>
            This class simulates an acquisition; it has to be configured with a list of
            competitors, the quantity of simultaneous competitors and the type of start.
            Then it will fires some events to simulate the starts, IRM or finish events.
            </summary>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.Simulator.#ctor(SwissTiming.Timing.AcquisitionSimulator.StartKind)">
            <summary>
            Initializes a new instance of the <see cref="T:SwissTiming.Timing.AcquisitionSimulator.Simulator"/> class.
            </summary>
            <param name="startType">The start type.</param>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.Simulator.Initialize(System.Collections.Generic.List{SwissTiming.Timing.AcquisitionSimulator.Competitor})">
            <summary>
            Initializes the current instance with the given list of competitors.
            </summary>
            <param name="competitors">The competitors.</param>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.Simulator.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.Simulator.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.Simulator.GetRunningCompetitors">
            <summary>
            Gets a random amount of running competitors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.Simulator.RaiseCompetitorChangedEvent(SwissTiming.Timing.AcquisitionSimulator.CompetitorChangedEventArgs)">
            <summary>
            Raises the competitor changed event.
            </summary>
            <param name="arg">The <see cref="T:SwissTiming.Timing.AcquisitionSimulator.CompetitorChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.Simulator.RaiseRaceStartedEvent(SwissTiming.Timing.AcquisitionSimulator.RaceStartedEventArgs)">
            <summary>
            Raises the race started event.
            </summary>
            <param name="arg">The <see cref="T:SwissTiming.Timing.AcquisitionSimulator.RaceStartedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.Simulator.RaiseRaceCompletedEvent(SwissTiming.Timing.AcquisitionSimulator.RaceCompletedEventArgs)">
            <summary>
            Raises the race completed event.
            </summary>
            <param name="arg">The <see cref="T:SwissTiming.Timing.AcquisitionSimulator.RaceCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:SwissTiming.Timing.AcquisitionSimulator.Simulator.StartType">
            <summary>
            Gets the start type.
            </summary>
        </member>
        <member name="P:SwissTiming.Timing.AcquisitionSimulator.Simulator.RaceStartTime">
            <summary>
            Stores the current race's start time (for a given competitor in individual start, for the whole race for a mass start)
            </summary>
        </member>
        <member name="P:SwissTiming.Timing.AcquisitionSimulator.Simulator.IsRunning">
            <summary>
            Gets a value indicating whether this simulator is running.
            </summary>
            <value>
            	<c>true</c> if this simulator is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:SwissTiming.Timing.AcquisitionSimulator.Simulator.RaceStarted">
            <summary>
            Occurs when one or many competitors started the race.
            </summary>
        </member>
        <member name="E:SwissTiming.Timing.AcquisitionSimulator.Simulator.CompetitorChanged">
            <summary>
            Occurs when a competitor receives an IRM notification.
            </summary>
        </member>
        <member name="E:SwissTiming.Timing.AcquisitionSimulator.Simulator.RaceCompleted">
            <summary>
            Occurs when one or many competitors ended the race.
            </summary>
        </member>
        <member name="T:SwissTiming.Timing.AcquisitionSimulator.CompetitorEventData">
            <summary>
            This class contains information about an event occurred to a given bib.
            </summary>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.CompetitorEventData.#ctor(SwissTiming.Timing.AcquisitionSimulator.Competitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SwissTiming.Timing.AcquisitionSimulator.CompetitorEventData"/> class.
            </summary>
            <param name="c">The competitor owing this event data</param>
        </member>
        <member name="P:SwissTiming.Timing.AcquisitionSimulator.CompetitorEventData.Bib">
            <summary>
            Gets the bib of the competitor.
            </summary>
        </member>
        <member name="T:SwissTiming.Timing.AcquisitionSimulator.TimedEventData">
            <summary>
            Defines information related to a timed event. This class adds a time information to an even
            for a given competitor
            </summary>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.TimedEventData.#ctor(SwissTiming.Timing.AcquisitionSimulator.Competitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SwissTiming.Timing.AcquisitionSimulator.TimedEventData"/> class.
            </summary>
            <param name="c">The c.</param>
        </member>
        <member name="P:SwissTiming.Timing.AcquisitionSimulator.TimedEventData.EventTime">
            <summary>
            Gets the start time (DayTime)
            </summary>
        </member>
        <member name="T:SwissTiming.Timing.AcquisitionSimulator.CompetitorChangedEventArgs">
            <summary>
            This class defines an IRM event assigned to one Competitor
            </summary>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.CompetitorChangedEventArgs.#ctor(SwissTiming.Timing.AcquisitionSimulator.Competitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SwissTiming.Timing.AcquisitionSimulator.CompetitorChangedEventArgs"/> class.
            </summary>
            <param name="c">The competitor owing this event data</param>
        </member>
        <member name="P:SwissTiming.Timing.AcquisitionSimulator.CompetitorChangedEventArgs.Irm">
            <summary>
            Gets the irm.
            </summary>
            <value>The irm.</value>
        </member>
        <member name="P:SwissTiming.Timing.AcquisitionSimulator.CompetitorChangedEventArgs.Reason">
            <summary>
            Gets the reason text justifying the associated irm.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:SwissTiming.Timing.AcquisitionSimulator.RaceCompletedEventArgs">
            <summary>
            This class contains information related to a Finish event for one given competitor.
            </summary>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.RaceCompletedEventArgs.#ctor(SwissTiming.Timing.AcquisitionSimulator.Competitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SwissTiming.Timing.AcquisitionSimulator.RaceCompletedEventArgs"/> class.
            </summary>
            <param name="c">The competitor owing this event data</param>
        </member>
        <member name="T:SwissTiming.Timing.AcquisitionSimulator.RaceStartedEventArgs">
            <summary>
            This class contains information related to a start event for one competitor
            </summary>
        </member>
        <member name="M:SwissTiming.Timing.AcquisitionSimulator.RaceStartedEventArgs.#ctor(SwissTiming.Timing.AcquisitionSimulator.Competitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SwissTiming.Timing.AcquisitionSimulator.RaceStartedEventArgs"/> class.
            </summary>
            <param name="c">The competitor owing this event data</param>
        </member>
        <member name="P:SwissTiming.Timing.AcquisitionSimulator.RaceStartedEventArgs.ReactionTime">
            <summary>
            Gets the reaction time of the current competitor.
            </summary>
        </member>
    </members>
</doc>
